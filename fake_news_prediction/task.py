# -*- coding: utf-8 -*-
"""practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19vZzEMB-fmTEcmrk5Fka98KSgGnuIcfb
"""

import os
os.environ['KAGGLE_USERNAME'] =
os.environ['KAGGLE_KEY'] =
!kaggle datasets download -d saurabhshahane/fake-news-classification

!unzip /content/fake-news-classification.zip

import pandas as pd
df = pd.read_csv('/content/WELFake_Dataset.csv')

df.head()

df['content'] = df['title']+' '+df['text']

df['content'][1]

"""##Check null values"""

df.isnull().sum()

df = df.fillna('')

df.isnull().sum()

"""##Preprocessing of text"""

import nltk
nltk.download('stopwords')

# remove punctuations
import string
exclude = string.punctuation
# transform characters in a string according to str.maketrans table
def remove_punc(text):
  return text.translate(str.maketrans('','',exclude))

df['content'] = df['content'].apply(remove_punc)

# remove stopwords (meaningless words)
from nltk.corpus import stopwords

# Load stopwords once as a set for O(1) lookup
STOPWORDS = set(stopwords.words('english'))

def remove_stopwords(text):
    # Split text and filter out stopwords in one pass
    return " ".join(word for word in text.split() if word not in STOPWORDS)

df['content'] = df['content'].apply(remove_stopwords)

# remove non-alphabetic
import re
def remove_non_alpha(text):
    # Replace non-alphabetical characters with space
    return re.sub('[^a-zA-Z]', ' ', text)

df['content'] = df['content'].apply(remove_non_alpha)

# convert lower
df['content'] = df['content'].apply(lambda x: x.lower())

# word stemming
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
def stem_words(text):
    return " ".join([ps.stem(word) for word in text.split()])

df['content'] = df['content'].apply(stem_words)

df['content']

"""## Model Training"""

X = df['content'].values
Y = df['label'].values

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

model = LogisticRegression()

model.fit(X_train, Y_train)

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', test_data_accuracy)

X_new = X_test[2]
prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')