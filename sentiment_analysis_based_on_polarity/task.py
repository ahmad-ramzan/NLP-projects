# -*- coding: utf-8 -*-
"""practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19vZzEMB-fmTEcmrk5Fka98KSgGnuIcfb
"""

import os
os.environ['KAGGLE_USERNAME'] =
os.environ['KAGGLE_KEY'] =
!kaggle datasets download -d noorsaeed/usa-election-sentiment-analysis-dataset

!unzip /content/usa-election-sentiment-analysis-dataset.zip

import pandas as pd
df1 = pd.read_csv('/content/Bidenall2.csv')
df2 = pd.read_csv('/content/Trumpall2.csv')

df1.head()

df2.head()

"""##Preprocessing of text"""

import re
import string
import nltk
nltk.download('punkt_tab')
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize

def preprocess_text(txt):
    # Lowercase
    txt = txt.lower()
    # Remove HTML tags (if any)
    txt = re.sub(r"<.*?>", " ", txt)
    # Remove URLs (if any)
    txt = re.sub(r"https?://\S+|www\.\S+", " ", txt)
    # Remove Punctuation
    txt = txt.translate(str.maketrans('', '', string.punctuation))
    # Remove numbers (optional, if you want to keep numbers, you can skip this step)
    txt = re.sub(r'[^A-Za-z\s]', '', txt)
    # Tokenize text
    words = word_tokenize(txt)

    return " ".join(words)

df1['text'].apply(preprocess_text)

df2['text'].apply(preprocess_text)

"""## Find Polarity"""

from textblob import TextBlob
textblob1 = TextBlob(df1['text'][500])
textblob1.sentiment.polarity

from textblob import TextBlob
def find_pol(text):
  text = TextBlob(text)
  return text.sentiment.polarity

find_pol(df1['text'][500])

df1['polarity'] = df1['text'].apply(find_pol)
df2['polarity'] = df2['text'].apply(find_pol)

import numpy as np
# Define conditions
conditions = [
    df1['polarity'] > 0,
    df1['polarity'] < 0,
    df1['polarity'] == 0
]
# Define corresponding labels
choices = ['positive', 'negative', 'neutral']

# Apply conditions to create the 'label' column
df1['label'] = np.select(conditions, choices, default='neutral')

import numpy as np
# Define conditions
conditions = [
    df2['polarity'] > 0,
    df2['polarity'] < 0,
    df2['polarity'] == 0
]
# Define corresponding labels
choices = ['positive', 'negative', 'neutral']

# Apply conditions to create the 'label' column
df2['label'] = np.select(conditions, choices, default='neutral')

df2.head()

df1 = df1[df1['polarity'] != 0].reset_index(drop=True)
df2 = df2[df2['polarity'] != 0].reset_index(drop=True)

print(df1.shape)
print(df2.shape)

positive_count1 = (df1['polarity'] > 0).sum()
negative_count1 = (df1['polarity'] < 0).sum()

positive_count2 = (df2['polarity'] > 0).sum()
negative_count2 = (df2['polarity'] < 0).sum()

print('positive comments on Biden are: ',positive_count1)
print('negative comments on Biden are: ',negative_count1)
positive_count1 - negative_count1

print('positive comments on Trump are: ',positive_count2)
print('negative comments on Trump are: ',negative_count2)
positive_count2 - negative_count2